# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy JAR app to Azure Web App - employee-example-devops

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Step 1 - Checkout main branch from GitHub
        uses: actions/checkout@v2

      - name: Step 2 - Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Step 3 - Build with Maven
        run: mvn clean package -DskipTests

      - name: Step 4 - Run unit tests
        run: mvn test

      - name: Analizar código con SonarCloud
        uses: sonarsource/sonarcloud-github-action@v1
        with:
          organization: "relari"
          token: ${{ secrets.SONAR_TOKEN }}
          projectKey: "Relari_api-employee-devops"
          projectName: "Api Employee DevOps"
          extraProperties: |
            sonar.projectDescription=Proyecto Spring Boot en Docker
            sonar.projectVersion=1.0.0
            sonar.sources=src
            sonar.tests=src/test
            sonar.java.binaries=target/classes
            sonar.java.test.binaries=target/test-classes

#      - name: Build with Maven - SonarCloud
#        run:  mvn -B verify sonar:sonar -Dsonar.projectKey=Relari_api-employee-devops -Dsonar.organization=relari -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN }}
#        env:
#          GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
#          SONARCLOUD_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Obtener hash corto del commit
        id: short_commit_hash
        run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

      - name: Step 5 - Docker build image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/api-employee-devops:${{ steps.short_commit_hash.outputs.hash }} .

#      - name: Iniciar contenedor Docker para pruebas
#        run: docker run -d --name app-test -p 8081:8081 ${{ secrets.DOCKERHUB_USERNAME }}/api-employee-devops:${{ steps.short_commit_hash.outputs.hash }}
#
#      - name: Realizar prueba con curl
#        run: |
#          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/api/v1/employees)
#          if [ $response -eq 200 ]; then
#            echo "La prueba pasó: La aplicación está respondiendo correctamente."
#          else
#            echo "La prueba falló: La aplicación no está respondiendo correctamente. Código de respuesta: $response"
#            exit 1
#          fi
#
#      - name: Detener contenedor de prueba
#        run: docker stop app-test
#        if: always()  # Asegurarse de que este paso siempre se ejecute, incluso si las pruebas fallan

      - name: Step 6 - Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Step 7 - Push de la imagen Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-employee-devops:${{ steps.short_commit_hash.outputs.hash }}

#      - name: Step 4 - List the current directory
#        run: dir
#
#      - name: Step 5 - What is in the target folder
#        run: |
#          cd target
#          dir
#
#      - name: Step 6 - Return root project
#        run: |
#          cd ..
#          cd api-employee-devops
#          dir

